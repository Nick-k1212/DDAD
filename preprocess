import os
from glob import glob
import cv2
import numpy as np
import torch
import torch.utils.data
from PIL import Image
from torchvision import transforms

class Dataset_maker(torch.utils.data.Dataset):
    def __init__(self, root, category, config, is_train=True):
        self.config = config
        self.image_transform = transforms.Compose([
            transforms.ToTensor(),  
            transforms.Lambda(lambda t: (t * 2) - 1)  
        ])

        self.mask_transform = transforms.Compose([
            transforms.ToTensor()
        ])

        if is_train:
            train_path = os.path.join(root, "train", category, "input", "PASS", "*", "*.jpg")
            print(f"Searching for training images in: {train_path}")
            self.image_files = glob(train_path)
        else:
            pass_path = os.path.join(root, "val", category, "input", "PASS", "*", "*.jpg")
            ng_path = os.path.join(root, "val", category, "input", "NG", "*", "*.jpg")
            print(f"Searching for validation images in: {pass_path} and {ng_path}")
            self.image_files = glob(pass_path) + glob(ng_path)

        if len(self.image_files) == 0:
            raise ValueError(
                f"No images found in the specified path. "
                f"Check your dataset structure and ensure the files are located at: "
                f"{train_path if is_train else pass_path + ' or ' + ng_path}"
            )

    def preprocess_image(self, image):
        """ 前處理：裁剪物件、旋轉對齊、統一尺寸 """
        image = np.array(image)  # 轉換為 NumPy 陣列
        image = self.resize_object(image)  # 裁剪並調整尺寸
        image = self.align_pca(image)  # PCA 旋轉對齊
        image = Image.fromarray(image)  # 轉回 PIL 格式
        image = self.image_transform(image)  # 應用標準轉換

        if image.shape[0] == 1:
            image = image.expand(3, image.shape[1], image.shape[2])

        return image

    def resize_object(self, image, target_size=(128, 128)):
        """ 使用 Bounding Box 裁剪物件，並 Resize 到固定大小 """
        gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        _, thresh = cv2.threshold(gray, 30, 255, cv2.THRESH_BINARY)
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        if contours:
            x, y, w, h = cv2.boundingRect(max(contours, key=cv2.contourArea))
            cropped = image[y:y+h, x:x+w]
            resized = cv2.resize(cropped, target_size, interpolation=cv2.INTER_AREA)
            return resized
        return cv2.resize(image, target_size)

    def align_pca(self, image):
        """ 使用 PCA 對齊物件方向 """
        gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        _, thresh = cv2.threshold(gray, 30, 255, cv2.THRESH_BINARY)
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        if contours:
            largest_contour = max(contours, key=cv2.contourArea)
            data_pts = np.vstack(largest_contour).squeeze()
            mean, eigenvectors = cv2.PCACompute(data_pts, mean=None)
            angle = np.arctan2(eigenvectors[0, 1], eigenvectors[0, 0]) * 180 / np.pi

            rot_matrix = cv2.getRotationMatrix2D(tuple(mean[0]), angle, 1)
            aligned_image = cv2.warpAffine(image, rot_matrix, (image.shape[1], image.shape[0]))
            return aligned_image
        return image

    def __getitem__(self, index):
        image_file = self.image_files[index]
        image = Image.open(image_file).convert("RGB")  # 確保是 RGB 格式
        image = self.preprocess_image(image)  # 應用前處理

        if self.is_train:
            label = 'good'
            return image, label
        else:
            if any(os.path.dirname(image_file).endswith(f"PASS\\{light}") for light in ["SolderLight", "UniformLight", "LowAngleLight", "WhiteLight"]):
                target = torch.zeros([1, image.shape[-2], image.shape[-1]])  # 沒有異常遮罩
                label = 'good'
            else:
                target = torch.zeros([1, image.shape[-2], image.shape[-1]])  # 預設遮罩（可自訂）
                label = 'defective'
            return image, target, label

    def __len__(self):
        return len(self.image_files)
